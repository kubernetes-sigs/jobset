# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API  # noqa: E501

    The version of the OpenAPI document: v0.1.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jobset.configuration import Configuration


class JobsetV1alpha2FailurePolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'max_restarts': 'int',
        'restart_strategy': 'str',
        'rules': 'list[JobsetV1alpha2FailurePolicyRule]'
    }

    attribute_map = {
        'max_restarts': 'maxRestarts',
        'restart_strategy': 'restartStrategy',
        'rules': 'rules'
    }

    def __init__(self, max_restarts=None, restart_strategy=None, rules=None, local_vars_configuration=None):  # noqa: E501
        """JobsetV1alpha2FailurePolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._max_restarts = None
        self._restart_strategy = None
        self._rules = None
        self.discriminator = None

        if max_restarts is not None:
            self.max_restarts = max_restarts
        if restart_strategy is not None:
            self.restart_strategy = restart_strategy
        if rules is not None:
            self.rules = rules

    @property
    def max_restarts(self):
        """Gets the max_restarts of this JobsetV1alpha2FailurePolicy.  # noqa: E501

        MaxRestarts defines the limit on the number of JobSet restarts. A restart is achieved by recreating all active child jobs.  # noqa: E501

        :return: The max_restarts of this JobsetV1alpha2FailurePolicy.  # noqa: E501
        :rtype: int
        """
        return self._max_restarts

    @max_restarts.setter
    def max_restarts(self, max_restarts):
        """Sets the max_restarts of this JobsetV1alpha2FailurePolicy.

        MaxRestarts defines the limit on the number of JobSet restarts. A restart is achieved by recreating all active child jobs.  # noqa: E501

        :param max_restarts: The max_restarts of this JobsetV1alpha2FailurePolicy.  # noqa: E501
        :type: int
        """

        self._max_restarts = max_restarts

    @property
    def restart_strategy(self):
        """Gets the restart_strategy of this JobsetV1alpha2FailurePolicy.  # noqa: E501

        RestartStrategy defines the strategy to use when restarting the JobSet. Defaults to Recreate.  # noqa: E501

        :return: The restart_strategy of this JobsetV1alpha2FailurePolicy.  # noqa: E501
        :rtype: str
        """
        return self._restart_strategy

    @restart_strategy.setter
    def restart_strategy(self, restart_strategy):
        """Sets the restart_strategy of this JobsetV1alpha2FailurePolicy.

        RestartStrategy defines the strategy to use when restarting the JobSet. Defaults to Recreate.  # noqa: E501

        :param restart_strategy: The restart_strategy of this JobsetV1alpha2FailurePolicy.  # noqa: E501
        :type: str
        """

        self._restart_strategy = restart_strategy

    @property
    def rules(self):
        """Gets the rules of this JobsetV1alpha2FailurePolicy.  # noqa: E501

        List of failure policy rules for this JobSet. For a given Job failure, the rules will be evaluated in order, and only the first matching rule will be executed. If no matching rule is found, the RestartJobSet action is applied.  # noqa: E501

        :return: The rules of this JobsetV1alpha2FailurePolicy.  # noqa: E501
        :rtype: list[JobsetV1alpha2FailurePolicyRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this JobsetV1alpha2FailurePolicy.

        List of failure policy rules for this JobSet. For a given Job failure, the rules will be evaluated in order, and only the first matching rule will be executed. If no matching rule is found, the RestartJobSet action is applied.  # noqa: E501

        :param rules: The rules of this JobsetV1alpha2FailurePolicy.  # noqa: E501
        :type: list[JobsetV1alpha2FailurePolicyRule]
        """

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsetV1alpha2FailurePolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsetV1alpha2FailurePolicy):
            return True

        return self.to_dict() != other.to_dict()
