# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API  # noqa: E501

    The version of the OpenAPI document: v0.1.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jobset.configuration import Configuration


class JobsetV1alpha2Network(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable_dns_hostnames': 'bool',
        'publish_not_ready_addresses': 'bool',
        'subdomain': 'str'
    }

    attribute_map = {
        'enable_dns_hostnames': 'enableDNSHostnames',
        'publish_not_ready_addresses': 'publishNotReadyAddresses',
        'subdomain': 'subdomain'
    }

    def __init__(self, enable_dns_hostnames=None, publish_not_ready_addresses=None, subdomain=None, local_vars_configuration=None):  # noqa: E501
        """JobsetV1alpha2Network - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enable_dns_hostnames = None
        self._publish_not_ready_addresses = None
        self._subdomain = None
        self.discriminator = None

        if enable_dns_hostnames is not None:
            self.enable_dns_hostnames = enable_dns_hostnames
        if publish_not_ready_addresses is not None:
            self.publish_not_ready_addresses = publish_not_ready_addresses
        if subdomain is not None:
            self.subdomain = subdomain

    @property
    def enable_dns_hostnames(self):
        """Gets the enable_dns_hostnames of this JobsetV1alpha2Network.  # noqa: E501

        EnableDNSHostnames allows pods to be reached via their hostnames. Pods will be reachable using the fully qualified pod hostname: <jobSet.name>-<spec.replicatedJob.name>-<job-index>-<pod-index>.<subdomain>  # noqa: E501

        :return: The enable_dns_hostnames of this JobsetV1alpha2Network.  # noqa: E501
        :rtype: bool
        """
        return self._enable_dns_hostnames

    @enable_dns_hostnames.setter
    def enable_dns_hostnames(self, enable_dns_hostnames):
        """Sets the enable_dns_hostnames of this JobsetV1alpha2Network.

        EnableDNSHostnames allows pods to be reached via their hostnames. Pods will be reachable using the fully qualified pod hostname: <jobSet.name>-<spec.replicatedJob.name>-<job-index>-<pod-index>.<subdomain>  # noqa: E501

        :param enable_dns_hostnames: The enable_dns_hostnames of this JobsetV1alpha2Network.  # noqa: E501
        :type: bool
        """

        self._enable_dns_hostnames = enable_dns_hostnames

    @property
    def publish_not_ready_addresses(self):
        """Gets the publish_not_ready_addresses of this JobsetV1alpha2Network.  # noqa: E501

        Indicates if DNS records of pods should be published before the pods are ready. Defaults to True.  # noqa: E501

        :return: The publish_not_ready_addresses of this JobsetV1alpha2Network.  # noqa: E501
        :rtype: bool
        """
        return self._publish_not_ready_addresses

    @publish_not_ready_addresses.setter
    def publish_not_ready_addresses(self, publish_not_ready_addresses):
        """Sets the publish_not_ready_addresses of this JobsetV1alpha2Network.

        Indicates if DNS records of pods should be published before the pods are ready. Defaults to True.  # noqa: E501

        :param publish_not_ready_addresses: The publish_not_ready_addresses of this JobsetV1alpha2Network.  # noqa: E501
        :type: bool
        """

        self._publish_not_ready_addresses = publish_not_ready_addresses

    @property
    def subdomain(self):
        """Gets the subdomain of this JobsetV1alpha2Network.  # noqa: E501

        Subdomain is an explicit choice for a network subdomain name When set, any replicated job in the set is added to this network. Defaults to <jobSet.name> if not set.  # noqa: E501

        :return: The subdomain of this JobsetV1alpha2Network.  # noqa: E501
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this JobsetV1alpha2Network.

        Subdomain is an explicit choice for a network subdomain name When set, any replicated job in the set is added to this network. Defaults to <jobSet.name> if not set.  # noqa: E501

        :param subdomain: The subdomain of this JobsetV1alpha2Network.  # noqa: E501
        :type: str
        """

        self._subdomain = subdomain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsetV1alpha2Network):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsetV1alpha2Network):
            return True

        return self.to_dict() != other.to_dict()
