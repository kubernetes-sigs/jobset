# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API  # noqa: E501

    The version of the OpenAPI document: v0.1.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jobset.configuration import Configuration


class JobsetV1alpha2StartupPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'startup_policy_order': 'str'
    }

    attribute_map = {
        'startup_policy_order': 'startupPolicyOrder'
    }

    def __init__(self, startup_policy_order='', local_vars_configuration=None):  # noqa: E501
        """JobsetV1alpha2StartupPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._startup_policy_order = None
        self.discriminator = None

        self.startup_policy_order = startup_policy_order

    @property
    def startup_policy_order(self):
        """Gets the startup_policy_order of this JobsetV1alpha2StartupPolicy.  # noqa: E501

        StartupPolicyOrder determines the startup order of the ReplicatedJobs. AnyOrder means to start replicated jobs in any order. InOrder means to start them as they are listed in the JobSet. A ReplicatedJob is started only when all the jobs of the previous one are ready.  # noqa: E501

        :return: The startup_policy_order of this JobsetV1alpha2StartupPolicy.  # noqa: E501
        :rtype: str
        """
        return self._startup_policy_order

    @startup_policy_order.setter
    def startup_policy_order(self, startup_policy_order):
        """Sets the startup_policy_order of this JobsetV1alpha2StartupPolicy.

        StartupPolicyOrder determines the startup order of the ReplicatedJobs. AnyOrder means to start replicated jobs in any order. InOrder means to start them as they are listed in the JobSet. A ReplicatedJob is started only when all the jobs of the previous one are ready.  # noqa: E501

        :param startup_policy_order: The startup_policy_order of this JobsetV1alpha2StartupPolicy.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and startup_policy_order is None:  # noqa: E501
            raise ValueError("Invalid value for `startup_policy_order`, must not be `None`")  # noqa: E501

        self._startup_policy_order = startup_policy_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsetV1alpha2StartupPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsetV1alpha2StartupPolicy):
            return True

        return self.to_dict() != other.to_dict()
