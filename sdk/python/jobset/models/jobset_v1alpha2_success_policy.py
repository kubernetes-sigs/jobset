# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API  # noqa: E501

    The version of the OpenAPI document: v0.1.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from jobset.configuration import Configuration


class JobsetV1alpha2SuccessPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operator': 'str',
        'target_replicated_jobs': 'list[str]'
    }

    attribute_map = {
        'operator': 'operator',
        'target_replicated_jobs': 'targetReplicatedJobs'
    }

    def __init__(self, operator='', target_replicated_jobs=None, local_vars_configuration=None):  # noqa: E501
        """JobsetV1alpha2SuccessPolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._operator = None
        self._target_replicated_jobs = None
        self.discriminator = None

        self.operator = operator
        if target_replicated_jobs is not None:
            self.target_replicated_jobs = target_replicated_jobs

    @property
    def operator(self):
        """Gets the operator of this JobsetV1alpha2SuccessPolicy.  # noqa: E501

        Operator determines either All or Any of the selected jobs should succeed to consider the JobSet successful  # noqa: E501

        :return: The operator of this JobsetV1alpha2SuccessPolicy.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this JobsetV1alpha2SuccessPolicy.

        Operator determines either All or Any of the selected jobs should succeed to consider the JobSet successful  # noqa: E501

        :param operator: The operator of this JobsetV1alpha2SuccessPolicy.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and operator is None:  # noqa: E501
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def target_replicated_jobs(self):
        """Gets the target_replicated_jobs of this JobsetV1alpha2SuccessPolicy.  # noqa: E501

        TargetReplicatedJobs are the names of the replicated jobs the operator will apply to. A null or empty list will apply to all replicatedJobs.  # noqa: E501

        :return: The target_replicated_jobs of this JobsetV1alpha2SuccessPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_replicated_jobs

    @target_replicated_jobs.setter
    def target_replicated_jobs(self, target_replicated_jobs):
        """Sets the target_replicated_jobs of this JobsetV1alpha2SuccessPolicy.

        TargetReplicatedJobs are the names of the replicated jobs the operator will apply to. A null or empty list will apply to all replicatedJobs.  # noqa: E501

        :param target_replicated_jobs: The target_replicated_jobs of this JobsetV1alpha2SuccessPolicy.  # noqa: E501
        :type: list[str]
        """

        self._target_replicated_jobs = target_replicated_jobs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsetV1alpha2SuccessPolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsetV1alpha2SuccessPolicy):
            return True

        return self.to_dict() != other.to_dict()
