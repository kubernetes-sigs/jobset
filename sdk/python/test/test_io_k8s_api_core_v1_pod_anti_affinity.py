# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API

    The version of the OpenAPI document: v0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jobset.models.io_k8s_api_core_v1_pod_anti_affinity import IoK8sApiCoreV1PodAntiAffinity

class TestIoK8sApiCoreV1PodAntiAffinity(unittest.TestCase):
    """IoK8sApiCoreV1PodAntiAffinity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1PodAntiAffinity:
        """Test IoK8sApiCoreV1PodAntiAffinity
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1PodAntiAffinity`
        """
        model = IoK8sApiCoreV1PodAntiAffinity()
        if include_optional:
            return IoK8sApiCoreV1PodAntiAffinity(
                preferred_during_scheduling_ignored_during_execution = [
                    jobset.models.io/k8s/api/core/v1/weighted_pod_affinity_term.io.k8s.api.core.v1.WeightedPodAffinityTerm(
                        pod_affinity_term = jobset.models.io/k8s/api/core/v1/pod_affinity_term.io.k8s.api.core.v1.PodAffinityTerm(
                            label_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                match_expressions = [
                                    jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                        key = '', 
                                        operator = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                match_labels = {
                                    'key' : ''
                                    }, ), 
                            match_label_keys = [
                                ''
                                ], 
                            mismatch_label_keys = [
                                ''
                                ], 
                            namespace_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(), 
                            namespaces = [
                                ''
                                ], 
                            topology_key = '', ), 
                        weight = 56, )
                    ],
                required_during_scheduling_ignored_during_execution = [
                    jobset.models.io/k8s/api/core/v1/pod_affinity_term.io.k8s.api.core.v1.PodAffinityTerm(
                        label_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                            match_expressions = [
                                jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                    key = '', 
                                    operator = '', 
                                    values = [
                                        ''
                                        ], )
                                ], 
                            match_labels = {
                                'key' : ''
                                }, ), 
                        match_label_keys = [
                            ''
                            ], 
                        mismatch_label_keys = [
                            ''
                            ], 
                        namespace_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(), 
                        namespaces = [
                            ''
                            ], 
                        topology_key = '', )
                    ]
            )
        else:
            return IoK8sApiCoreV1PodAntiAffinity(
        )
        """

    def testIoK8sApiCoreV1PodAntiAffinity(self):
        """Test IoK8sApiCoreV1PodAntiAffinity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
