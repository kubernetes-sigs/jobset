# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API

    The version of the OpenAPI document: v0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jobset.models.io_k8s_api_core_v1_pod_template_spec import IoK8sApiCoreV1PodTemplateSpec

class TestIoK8sApiCoreV1PodTemplateSpec(unittest.TestCase):
    """IoK8sApiCoreV1PodTemplateSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1PodTemplateSpec:
        """Test IoK8sApiCoreV1PodTemplateSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1PodTemplateSpec`
        """
        model = IoK8sApiCoreV1PodTemplateSpec()
        if include_optional:
            return IoK8sApiCoreV1PodTemplateSpec(
                metadata = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            subresource = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = jobset.models.io/k8s/api/core/v1/pod_spec.io.k8s.api.core.v1.PodSpec(
                    active_deadline_seconds = 56, 
                    affinity = jobset.models.io/k8s/api/core/v1/affinity.io.k8s.api.core.v1.Affinity(
                        node_affinity = jobset.models.io/k8s/api/core/v1/node_affinity.io.k8s.api.core.v1.NodeAffinity(
                            preferred_during_scheduling_ignored_during_execution = [
                                jobset.models.io/k8s/api/core/v1/preferred_scheduling_term.io.k8s.api.core.v1.PreferredSchedulingTerm(
                                    preference = jobset.models.io/k8s/api/core/v1/node_selector_term.io.k8s.api.core.v1.NodeSelectorTerm(
                                        match_expressions = [
                                            jobset.models.io/k8s/api/core/v1/node_selector_requirement.io.k8s.api.core.v1.NodeSelectorRequirement(
                                                key = '', 
                                                operator = '', 
                                                values = [
                                                    ''
                                                    ], )
                                            ], 
                                        match_fields = [
                                            jobset.models.io/k8s/api/core/v1/node_selector_requirement.io.k8s.api.core.v1.NodeSelectorRequirement(
                                                key = '', 
                                                operator = '', )
                                            ], ), 
                                    weight = 56, )
                                ], 
                            required_during_scheduling_ignored_during_execution = jobset.models.io/k8s/api/core/v1/node_selector.io.k8s.api.core.v1.NodeSelector(
                                node_selector_terms = [
                                    jobset.models.io/k8s/api/core/v1/node_selector_term.io.k8s.api.core.v1.NodeSelectorTerm()
                                    ], ), ), 
                        pod_affinity = jobset.models.io/k8s/api/core/v1/pod_affinity.io.k8s.api.core.v1.PodAffinity(), 
                        pod_anti_affinity = jobset.models.io/k8s/api/core/v1/pod_anti_affinity.io.k8s.api.core.v1.PodAntiAffinity(), ), 
                    automount_service_account_token = True, 
                    containers = [
                        jobset.models.io/k8s/api/core/v1/container.io.k8s.api.core.v1.Container(
                            args = [
                                ''
                                ], 
                            command = [
                                ''
                                ], 
                            env = [
                                jobset.models.io/k8s/api/core/v1/env_var.io.k8s.api.core.v1.EnvVar(
                                    name = '', 
                                    value = '', 
                                    value_from = jobset.models.io/k8s/api/core/v1/env_var_source.io.k8s.api.core.v1.EnvVarSource(
                                        config_map_key_ref = jobset.models.io/k8s/api/core/v1/config_map_key_selector.io.k8s.api.core.v1.ConfigMapKeySelector(
                                            key = '', 
                                            name = '', 
                                            optional = True, ), 
                                        field_ref = jobset.models.io/k8s/api/core/v1/object_field_selector.io.k8s.api.core.v1.ObjectFieldSelector(
                                            api_version = '', 
                                            field_path = '', ), 
                                        resource_field_ref = jobset.models.io/k8s/api/core/v1/resource_field_selector.io.k8s.api.core.v1.ResourceFieldSelector(
                                            container_name = '', 
                                            divisor = '', 
                                            resource = '', ), 
                                        secret_key_ref = jobset.models.io/k8s/api/core/v1/secret_key_selector.io.k8s.api.core.v1.SecretKeySelector(
                                            key = '', 
                                            name = '', 
                                            optional = True, ), ), )
                                ], 
                            env_from = [
                                jobset.models.io/k8s/api/core/v1/env_from_source.io.k8s.api.core.v1.EnvFromSource(
                                    config_map_ref = jobset.models.io/k8s/api/core/v1/config_map_env_source.io.k8s.api.core.v1.ConfigMapEnvSource(
                                        name = '', 
                                        optional = True, ), 
                                    prefix = '', 
                                    secret_ref = jobset.models.io/k8s/api/core/v1/secret_env_source.io.k8s.api.core.v1.SecretEnvSource(
                                        name = '', 
                                        optional = True, ), )
                                ], 
                            image = '', 
                            image_pull_policy = '', 
                            lifecycle = jobset.models.io/k8s/api/core/v1/lifecycle.io.k8s.api.core.v1.Lifecycle(
                                post_start = jobset.models.io/k8s/api/core/v1/lifecycle_handler.io.k8s.api.core.v1.LifecycleHandler(
                                    exec = jobset.models.io/k8s/api/core/v1/exec_action.io.k8s.api.core.v1.ExecAction(), 
                                    http_get = jobset.models.io/k8s/api/core/v1/http_get_action.io.k8s.api.core.v1.HTTPGetAction(
                                        host = '', 
                                        http_headers = [
                                            jobset.models.io/k8s/api/core/v1/http_header.io.k8s.api.core.v1.HTTPHeader(
                                                name = '', 
                                                value = '', )
                                            ], 
                                        path = '', 
                                        port = '', 
                                        scheme = '', ), 
                                    sleep = jobset.models.io/k8s/api/core/v1/sleep_action.io.k8s.api.core.v1.SleepAction(
                                        seconds = 56, ), 
                                    tcp_socket = jobset.models.io/k8s/api/core/v1/tcp_socket_action.io.k8s.api.core.v1.TCPSocketAction(
                                        host = '', 
                                        port = '', ), ), 
                                pre_stop = jobset.models.io/k8s/api/core/v1/lifecycle_handler.io.k8s.api.core.v1.LifecycleHandler(), ), 
                            liveness_probe = jobset.models.io/k8s/api/core/v1/probe.io.k8s.api.core.v1.Probe(
                                failure_threshold = 56, 
                                grpc = jobset.models.io/k8s/api/core/v1/grpc_action.io.k8s.api.core.v1.GRPCAction(
                                    port = 56, 
                                    service = '', ), 
                                initial_delay_seconds = 56, 
                                period_seconds = 56, 
                                success_threshold = 56, 
                                termination_grace_period_seconds = 56, 
                                timeout_seconds = 56, ), 
                            name = '', 
                            ports = [
                                jobset.models.io/k8s/api/core/v1/container_port.io.k8s.api.core.v1.ContainerPort(
                                    container_port = 56, 
                                    host_ip = '', 
                                    host_port = 56, 
                                    name = '', 
                                    protocol = '', )
                                ], 
                            readiness_probe = jobset.models.io/k8s/api/core/v1/probe.io.k8s.api.core.v1.Probe(
                                failure_threshold = 56, 
                                initial_delay_seconds = 56, 
                                period_seconds = 56, 
                                success_threshold = 56, 
                                termination_grace_period_seconds = 56, 
                                timeout_seconds = 56, ), 
                            resize_policy = [
                                jobset.models.io/k8s/api/core/v1/container_resize_policy.io.k8s.api.core.v1.ContainerResizePolicy(
                                    resource_name = '', 
                                    restart_policy = '', )
                                ], 
                            resources = jobset.models.io/k8s/api/core/v1/resource_requirements.io.k8s.api.core.v1.ResourceRequirements(
                                claims = [
                                    jobset.models.io/k8s/api/core/v1/resource_claim.io.k8s.api.core.v1.ResourceClaim(
                                        name = '', 
                                        request = '', )
                                    ], 
                                limits = {
                                    'key' : ''
                                    }, 
                                requests = {
                                    'key' : ''
                                    }, ), 
                            restart_policy = '', 
                            security_context = jobset.models.io/k8s/api/core/v1/security_context.io.k8s.api.core.v1.SecurityContext(
                                allow_privilege_escalation = True, 
                                app_armor_profile = jobset.models.io/k8s/api/core/v1/app_armor_profile.io.k8s.api.core.v1.AppArmorProfile(
                                    localhost_profile = '', 
                                    type = '', ), 
                                capabilities = jobset.models.io/k8s/api/core/v1/capabilities.io.k8s.api.core.v1.Capabilities(
                                    add = [
                                        ''
                                        ], 
                                    drop = [
                                        ''
                                        ], ), 
                                privileged = True, 
                                proc_mount = '', 
                                read_only_root_filesystem = True, 
                                run_as_group = 56, 
                                run_as_non_root = True, 
                                run_as_user = 56, 
                                se_linux_options = jobset.models.io/k8s/api/core/v1/se_linux_options.io.k8s.api.core.v1.SELinuxOptions(
                                    level = '', 
                                    role = '', 
                                    type = '', 
                                    user = '', ), 
                                seccomp_profile = jobset.models.io/k8s/api/core/v1/seccomp_profile.io.k8s.api.core.v1.SeccompProfile(
                                    localhost_profile = '', 
                                    type = '', ), 
                                windows_options = jobset.models.io/k8s/api/core/v1/windows_security_context_options.io.k8s.api.core.v1.WindowsSecurityContextOptions(
                                    gmsa_credential_spec = '', 
                                    gmsa_credential_spec_name = '', 
                                    host_process = True, 
                                    run_as_user_name = '', ), ), 
                            startup_probe = , 
                            stdin = True, 
                            stdin_once = True, 
                            termination_message_path = '', 
                            termination_message_policy = '', 
                            tty = True, 
                            volume_devices = [
                                jobset.models.io/k8s/api/core/v1/volume_device.io.k8s.api.core.v1.VolumeDevice(
                                    device_path = '', 
                                    name = '', )
                                ], 
                            volume_mounts = [
                                jobset.models.io/k8s/api/core/v1/volume_mount.io.k8s.api.core.v1.VolumeMount(
                                    mount_path = '', 
                                    mount_propagation = '', 
                                    name = '', 
                                    read_only = True, 
                                    recursive_read_only = '', 
                                    sub_path = '', 
                                    sub_path_expr = '', )
                                ], 
                            working_dir = '', )
                        ], 
                    dns_config = jobset.models.io/k8s/api/core/v1/pod_dns_config.io.k8s.api.core.v1.PodDNSConfig(
                        nameservers = [
                            ''
                            ], 
                        options = [
                            jobset.models.io/k8s/api/core/v1/pod_dns_config_option.io.k8s.api.core.v1.PodDNSConfigOption(
                                name = '', 
                                value = '', )
                            ], 
                        searches = [
                            ''
                            ], ), 
                    dns_policy = '', 
                    enable_service_links = True, 
                    ephemeral_containers = [
                        jobset.models.io/k8s/api/core/v1/ephemeral_container.io.k8s.api.core.v1.EphemeralContainer(
                            image = '', 
                            image_pull_policy = '', 
                            name = '', 
                            restart_policy = '', 
                            stdin = True, 
                            stdin_once = True, 
                            target_container_name = '', 
                            termination_message_path = '', 
                            termination_message_policy = '', 
                            tty = True, 
                            working_dir = '', )
                        ], 
                    host_aliases = [
                        jobset.models.io/k8s/api/core/v1/host_alias.io.k8s.api.core.v1.HostAlias(
                            hostnames = [
                                ''
                                ], 
                            ip = '', )
                        ], 
                    host_ipc = True, 
                    host_network = True, 
                    host_pid = True, 
                    host_users = True, 
                    hostname = '', 
                    image_pull_secrets = [
                        jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                            name = '', )
                        ], 
                    init_containers = [
                        jobset.models.io/k8s/api/core/v1/container.io.k8s.api.core.v1.Container(
                            image = '', 
                            image_pull_policy = '', 
                            name = '', 
                            restart_policy = '', 
                            stdin = True, 
                            stdin_once = True, 
                            termination_message_path = '', 
                            termination_message_policy = '', 
                            tty = True, 
                            working_dir = '', )
                        ], 
                    node_name = '', 
                    node_selector = {
                        'key' : ''
                        }, 
                    os = jobset.models.io/k8s/api/core/v1/pod_os.io.k8s.api.core.v1.PodOS(
                        name = '', ), 
                    overhead = {
                        'key' : ''
                        }, 
                    preemption_policy = '', 
                    priority = 56, 
                    priority_class_name = '', 
                    readiness_gates = [
                        jobset.models.io/k8s/api/core/v1/pod_readiness_gate.io.k8s.api.core.v1.PodReadinessGate(
                            condition_type = '', )
                        ], 
                    resource_claims = [
                        jobset.models.io/k8s/api/core/v1/pod_resource_claim.io.k8s.api.core.v1.PodResourceClaim(
                            name = '', 
                            resource_claim_name = '', 
                            resource_claim_template_name = '', )
                        ], 
                    resources = jobset.models.io/k8s/api/core/v1/resource_requirements.io.k8s.api.core.v1.ResourceRequirements(), 
                    restart_policy = '', 
                    runtime_class_name = '', 
                    scheduler_name = '', 
                    scheduling_gates = [
                        jobset.models.io/k8s/api/core/v1/pod_scheduling_gate.io.k8s.api.core.v1.PodSchedulingGate(
                            name = '', )
                        ], 
                    security_context = jobset.models.io/k8s/api/core/v1/pod_security_context.io.k8s.api.core.v1.PodSecurityContext(
                        fs_group = 56, 
                        fs_group_change_policy = '', 
                        run_as_group = 56, 
                        run_as_non_root = True, 
                        run_as_user = 56, 
                        se_linux_change_policy = '', 
                        supplemental_groups = [
                            56
                            ], 
                        supplemental_groups_policy = '', 
                        sysctls = [
                            jobset.models.io/k8s/api/core/v1/sysctl.io.k8s.api.core.v1.Sysctl(
                                name = '', 
                                value = '', )
                            ], ), 
                    service_account = '', 
                    service_account_name = '', 
                    set_hostname_as_fqdn = True, 
                    share_process_namespace = True, 
                    subdomain = '', 
                    termination_grace_period_seconds = 56, 
                    tolerations = [
                        jobset.models.io/k8s/api/core/v1/toleration.io.k8s.api.core.v1.Toleration(
                            effect = '', 
                            key = '', 
                            operator = '', 
                            toleration_seconds = 56, 
                            value = '', )
                        ], 
                    topology_spread_constraints = [
                        jobset.models.io/k8s/api/core/v1/topology_spread_constraint.io.k8s.api.core.v1.TopologySpreadConstraint(
                            label_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                match_labels = {
                                    'key' : ''
                                    }, ), 
                            match_label_keys = [
                                ''
                                ], 
                            max_skew = 56, 
                            min_domains = 56, 
                            node_affinity_policy = '', 
                            node_taints_policy = '', 
                            topology_key = '', 
                            when_unsatisfiable = '', )
                        ], 
                    volumes = [
                        jobset.models.io/k8s/api/core/v1/volume.io.k8s.api.core.v1.Volume(
                            aws_elastic_block_store = jobset.models.io/k8s/api/core/v1/aws_elastic_block_store_volume_source.io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource(
                                fs_type = '', 
                                partition = 56, 
                                read_only = True, 
                                volume_id = '', ), 
                            azure_disk = jobset.models.io/k8s/api/core/v1/azure_disk_volume_source.io.k8s.api.core.v1.AzureDiskVolumeSource(
                                caching_mode = '', 
                                disk_name = '', 
                                disk_uri = '', 
                                fs_type = '', 
                                kind = '', 
                                read_only = True, ), 
                            azure_file = jobset.models.io/k8s/api/core/v1/azure_file_volume_source.io.k8s.api.core.v1.AzureFileVolumeSource(
                                read_only = True, 
                                secret_name = '', 
                                share_name = '', ), 
                            cephfs = jobset.models.io/k8s/api/core/v1/ceph_fs_volume_source.io.k8s.api.core.v1.CephFSVolumeSource(
                                monitors = [
                                    ''
                                    ], 
                                path = '', 
                                read_only = True, 
                                secret_file = '', 
                                user = '', ), 
                            cinder = jobset.models.io/k8s/api/core/v1/cinder_volume_source.io.k8s.api.core.v1.CinderVolumeSource(
                                fs_type = '', 
                                read_only = True, 
                                volume_id = '', ), 
                            config_map = jobset.models.io/k8s/api/core/v1/config_map_volume_source.io.k8s.api.core.v1.ConfigMapVolumeSource(
                                default_mode = 56, 
                                items = [
                                    jobset.models.io/k8s/api/core/v1/key_to_path.io.k8s.api.core.v1.KeyToPath(
                                        key = '', 
                                        mode = 56, 
                                        path = '', )
                                    ], 
                                name = '', 
                                optional = True, ), 
                            csi = jobset.models.io/k8s/api/core/v1/csi_volume_source.io.k8s.api.core.v1.CSIVolumeSource(
                                driver = '', 
                                fs_type = '', 
                                node_publish_secret_ref = jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                                    name = '', ), 
                                read_only = True, 
                                volume_attributes = {
                                    'key' : ''
                                    }, ), 
                            downward_api = jobset.models.io/k8s/api/core/v1/downward_api_volume_source.io.k8s.api.core.v1.DownwardAPIVolumeSource(
                                default_mode = 56, ), 
                            empty_dir = jobset.models.io/k8s/api/core/v1/empty_dir_volume_source.io.k8s.api.core.v1.EmptyDirVolumeSource(
                                medium = '', 
                                size_limit = '', ), 
                            ephemeral = jobset.models.io/k8s/api/core/v1/ephemeral_volume_source.io.k8s.api.core.v1.EphemeralVolumeSource(
                                volume_claim_template = jobset.models.io/k8s/api/core/v1/persistent_volume_claim_template.io.k8s.api.core.v1.PersistentVolumeClaimTemplate(
                                    metadata = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                                        annotations = {
                                            'key' : ''
                                            }, 
                                        creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        deletion_grace_period_seconds = 56, 
                                        deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        finalizers = [
                                            ''
                                            ], 
                                        generate_name = '', 
                                        generation = 56, 
                                        labels = {
                                            'key' : ''
                                            }, 
                                        managed_fields = [
                                            jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                                                api_version = '', 
                                                fields_type = '', 
                                                fields_v1 = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                                                manager = '', 
                                                operation = '', 
                                                subresource = '', 
                                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                            ], 
                                        name = '', 
                                        namespace = '', 
                                        owner_references = [
                                            jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                                                api_version = '', 
                                                block_owner_deletion = True, 
                                                controller = True, 
                                                kind = '', 
                                                name = '', 
                                                uid = '', )
                                            ], 
                                        resource_version = '', 
                                        self_link = '', 
                                        uid = '', ), 
                                    spec = jobset.models.io/k8s/api/core/v1/persistent_volume_claim_spec.io.k8s.api.core.v1.PersistentVolumeClaimSpec(
                                        access_modes = [
                                            ''
                                            ], 
                                        data_source = jobset.models.io/k8s/api/core/v1/typed_local_object_reference.io.k8s.api.core.v1.TypedLocalObjectReference(
                                            api_group = '', 
                                            kind = '', 
                                            name = '', ), 
                                        data_source_ref = jobset.models.io/k8s/api/core/v1/typed_object_reference.io.k8s.api.core.v1.TypedObjectReference(
                                            api_group = '', 
                                            kind = '', 
                                            name = '', 
                                            namespace = '', ), 
                                        selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(), 
                                        storage_class_name = '', 
                                        volume_attributes_class_name = '', 
                                        volume_mode = '', 
                                        volume_name = '', ), ), ), 
                            fc = jobset.models.io/k8s/api/core/v1/fc_volume_source.io.k8s.api.core.v1.FCVolumeSource(
                                fs_type = '', 
                                lun = 56, 
                                read_only = True, 
                                target_wwns = [
                                    ''
                                    ], 
                                wwids = [
                                    ''
                                    ], ), 
                            flex_volume = jobset.models.io/k8s/api/core/v1/flex_volume_source.io.k8s.api.core.v1.FlexVolumeSource(
                                driver = '', 
                                fs_type = '', 
                                read_only = True, ), 
                            flocker = jobset.models.io/k8s/api/core/v1/flocker_volume_source.io.k8s.api.core.v1.FlockerVolumeSource(
                                dataset_name = '', 
                                dataset_uuid = '', ), 
                            gce_persistent_disk = jobset.models.io/k8s/api/core/v1/gce_persistent_disk_volume_source.io.k8s.api.core.v1.GCEPersistentDiskVolumeSource(
                                fs_type = '', 
                                partition = 56, 
                                pd_name = '', 
                                read_only = True, ), 
                            git_repo = jobset.models.io/k8s/api/core/v1/git_repo_volume_source.io.k8s.api.core.v1.GitRepoVolumeSource(
                                directory = '', 
                                repository = '', 
                                revision = '', ), 
                            glusterfs = jobset.models.io/k8s/api/core/v1/glusterfs_volume_source.io.k8s.api.core.v1.GlusterfsVolumeSource(
                                endpoints = '', 
                                path = '', 
                                read_only = True, ), 
                            host_path = jobset.models.io/k8s/api/core/v1/host_path_volume_source.io.k8s.api.core.v1.HostPathVolumeSource(
                                path = '', 
                                type = '', ), 
                            image = jobset.models.io/k8s/api/core/v1/image_volume_source.io.k8s.api.core.v1.ImageVolumeSource(
                                pull_policy = '', 
                                reference = '', ), 
                            iscsi = jobset.models.io/k8s/api/core/v1/iscsi_volume_source.io.k8s.api.core.v1.ISCSIVolumeSource(
                                chap_auth_discovery = True, 
                                chap_auth_session = True, 
                                fs_type = '', 
                                initiator_name = '', 
                                iqn = '', 
                                iscsi_interface = '', 
                                lun = 56, 
                                portals = [
                                    ''
                                    ], 
                                read_only = True, 
                                target_portal = '', ), 
                            name = '', 
                            nfs = jobset.models.io/k8s/api/core/v1/nfs_volume_source.io.k8s.api.core.v1.NFSVolumeSource(
                                path = '', 
                                read_only = True, 
                                server = '', ), 
                            persistent_volume_claim = jobset.models.io/k8s/api/core/v1/persistent_volume_claim_volume_source.io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource(
                                claim_name = '', 
                                read_only = True, ), 
                            photon_persistent_disk = jobset.models.io/k8s/api/core/v1/photon_persistent_disk_volume_source.io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource(
                                fs_type = '', 
                                pd_id = '', ), 
                            portworx_volume = jobset.models.io/k8s/api/core/v1/portworx_volume_source.io.k8s.api.core.v1.PortworxVolumeSource(
                                fs_type = '', 
                                read_only = True, 
                                volume_id = '', ), 
                            projected = jobset.models.io/k8s/api/core/v1/projected_volume_source.io.k8s.api.core.v1.ProjectedVolumeSource(
                                default_mode = 56, 
                                sources = [
                                    jobset.models.io/k8s/api/core/v1/volume_projection.io.k8s.api.core.v1.VolumeProjection(
                                        cluster_trust_bundle = jobset.models.io/k8s/api/core/v1/cluster_trust_bundle_projection.io.k8s.api.core.v1.ClusterTrustBundleProjection(
                                            name = '', 
                                            optional = True, 
                                            path = '', 
                                            signer_name = '', ), 
                                        secret = jobset.models.io/k8s/api/core/v1/secret_projection.io.k8s.api.core.v1.SecretProjection(
                                            name = '', 
                                            optional = True, ), 
                                        service_account_token = jobset.models.io/k8s/api/core/v1/service_account_token_projection.io.k8s.api.core.v1.ServiceAccountTokenProjection(
                                            audience = '', 
                                            expiration_seconds = 56, 
                                            path = '', ), )
                                    ], ), 
                            quobyte = jobset.models.io/k8s/api/core/v1/quobyte_volume_source.io.k8s.api.core.v1.QuobyteVolumeSource(
                                group = '', 
                                read_only = True, 
                                registry = '', 
                                tenant = '', 
                                user = '', 
                                volume = '', ), 
                            rbd = jobset.models.io/k8s/api/core/v1/rbd_volume_source.io.k8s.api.core.v1.RBDVolumeSource(
                                fs_type = '', 
                                image = '', 
                                keyring = '', 
                                monitors = [
                                    ''
                                    ], 
                                pool = '', 
                                read_only = True, 
                                user = '', ), 
                            scale_io = jobset.models.io/k8s/api/core/v1/scale_io_volume_source.io.k8s.api.core.v1.ScaleIOVolumeSource(
                                fs_type = '', 
                                gateway = '', 
                                protection_domain = '', 
                                read_only = True, 
                                secret_ref = , 
                                ssl_enabled = True, 
                                storage_mode = '', 
                                storage_pool = '', 
                                system = '', 
                                volume_name = '', ), 
                            secret = jobset.models.io/k8s/api/core/v1/secret_volume_source.io.k8s.api.core.v1.SecretVolumeSource(
                                default_mode = 56, 
                                optional = True, 
                                secret_name = '', ), 
                            storageos = jobset.models.io/k8s/api/core/v1/storage_os_volume_source.io.k8s.api.core.v1.StorageOSVolumeSource(
                                fs_type = '', 
                                read_only = True, 
                                volume_name = '', 
                                volume_namespace = '', ), 
                            vsphere_volume = jobset.models.io/k8s/api/core/v1/vsphere_virtual_disk_volume_source.io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource(
                                fs_type = '', 
                                storage_policy_id = '', 
                                storage_policy_name = '', 
                                volume_path = '', ), )
                        ], )
            )
        else:
            return IoK8sApiCoreV1PodTemplateSpec(
        )
        """

    def testIoK8sApiCoreV1PodTemplateSpec(self):
        """Test IoK8sApiCoreV1PodTemplateSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
