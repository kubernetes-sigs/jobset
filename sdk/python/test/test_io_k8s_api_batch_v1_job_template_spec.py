# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API

    The version of the OpenAPI document: v0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jobset.models.io_k8s_api_batch_v1_job_template_spec import IoK8sApiBatchV1JobTemplateSpec

class TestIoK8sApiBatchV1JobTemplateSpec(unittest.TestCase):
    """IoK8sApiBatchV1JobTemplateSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiBatchV1JobTemplateSpec:
        """Test IoK8sApiBatchV1JobTemplateSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiBatchV1JobTemplateSpec`
        """
        model = IoK8sApiBatchV1JobTemplateSpec()
        if include_optional:
            return IoK8sApiBatchV1JobTemplateSpec(
                metadata = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            subresource = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = jobset.models.io/k8s/api/batch/v1/job_spec.io.k8s.api.batch.v1.JobSpec(
                    active_deadline_seconds = 56, 
                    backoff_limit = 56, 
                    backoff_limit_per_index = 56, 
                    completion_mode = '', 
                    completions = 56, 
                    managed_by = '', 
                    manual_selector = True, 
                    max_failed_indexes = 56, 
                    parallelism = 56, 
                    pod_failure_policy = jobset.models.io/k8s/api/batch/v1/pod_failure_policy.io.k8s.api.batch.v1.PodFailurePolicy(
                        rules = [
                            jobset.models.io/k8s/api/batch/v1/pod_failure_policy_rule.io.k8s.api.batch.v1.PodFailurePolicyRule(
                                action = '', 
                                on_exit_codes = jobset.models.io/k8s/api/batch/v1/pod_failure_policy_on_exit_codes_requirement.io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement(
                                    container_name = '', 
                                    operator = '', 
                                    values = [
                                        56
                                        ], ), 
                                on_pod_conditions = [
                                    jobset.models.io/k8s/api/batch/v1/pod_failure_policy_on_pod_conditions_pattern.io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern(
                                        status = '', 
                                        type = '', )
                                    ], )
                            ], ), 
                    pod_replacement_policy = '', 
                    selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                        match_expressions = [
                            jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                key = '', 
                                operator = '', )
                            ], 
                        match_labels = {
                            'key' : ''
                            }, ), 
                    success_policy = jobset.models.io/k8s/api/batch/v1/success_policy.io.k8s.api.batch.v1.SuccessPolicy(
                        rules = [
                            jobset.models.io/k8s/api/batch/v1/success_policy_rule.io.k8s.api.batch.v1.SuccessPolicyRule(
                                succeeded_count = 56, 
                                succeeded_indexes = '', )
                            ], ), 
                    suspend = True, 
                    template = jobset.models.io/k8s/api/core/v1/pod_template_spec.io.k8s.api.core.v1.PodTemplateSpec(
                        metadata = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    subresource = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), ), 
                    ttl_seconds_after_finished = 56, )
            )
        else:
            return IoK8sApiBatchV1JobTemplateSpec(
        )
        """

    def testIoK8sApiBatchV1JobTemplateSpec(self):
        """Test IoK8sApiBatchV1JobTemplateSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
