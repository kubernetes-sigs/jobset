# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API

    The version of the OpenAPI document: v0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jobset.models.jobset_v1alpha2_job_set import JobsetV1alpha2JobSet

class TestJobsetV1alpha2JobSet(unittest.TestCase):
    """JobsetV1alpha2JobSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobsetV1alpha2JobSet:
        """Test JobsetV1alpha2JobSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobsetV1alpha2JobSet`
        """
        model = JobsetV1alpha2JobSet()
        if include_optional:
            return JobsetV1alpha2JobSet(
                api_version = '',
                kind = '',
                metadata = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            subresource = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = jobset.models.jobset_v1alpha2_job_set_spec.JobsetV1alpha2JobSetSpec(
                    coordinator = jobset.models.jobset_v1alpha2_coordinator.JobsetV1alpha2Coordinator(
                        job_index = 56, 
                        pod_index = 56, 
                        replicated_job = '', ), 
                    failure_policy = jobset.models.jobset_v1alpha2_failure_policy.JobsetV1alpha2FailurePolicy(
                        max_restarts = 56, 
                        restart_strategy = '', 
                        rules = [
                            jobset.models.jobset_v1alpha2_failure_policy_rule.JobsetV1alpha2FailurePolicyRule(
                                action = '', 
                                name = '', 
                                on_job_failure_reasons = [
                                    ''
                                    ], 
                                target_replicated_jobs = [
                                    ''
                                    ], )
                            ], ), 
                    managed_by = '', 
                    network = jobset.models.jobset_v1alpha2_network.JobsetV1alpha2Network(
                        enable_dns_hostnames = True, 
                        publish_not_ready_addresses = True, 
                        subdomain = '', ), 
                    replicated_jobs = [
                        jobset.models.jobset_v1alpha2_replicated_job.JobsetV1alpha2ReplicatedJob(
                            depends_on = [
                                jobset.models.jobset_v1alpha2_depends_on.JobsetV1alpha2DependsOn(
                                    name = '', 
                                    status = '', )
                                ], 
                            group_name = '', 
                            name = '', 
                            replicas = 56, 
                            template = jobset.models.io/k8s/api/batch/v1/job_template_spec.io.k8s.api.batch.v1.JobTemplateSpec(
                                metadata = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                                    annotations = {
                                        'key' : ''
                                        }, 
                                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    deletion_grace_period_seconds = 56, 
                                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    finalizers = [
                                        ''
                                        ], 
                                    generate_name = '', 
                                    generation = 56, 
                                    labels = {
                                        'key' : ''
                                        }, 
                                    managed_fields = [
                                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                                            api_version = '', 
                                            fields_type = '', 
                                            fields_v1 = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                                            manager = '', 
                                            operation = '', 
                                            subresource = '', 
                                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                        ], 
                                    name = '', 
                                    namespace = '', 
                                    owner_references = [
                                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                                            api_version = '', 
                                            block_owner_deletion = True, 
                                            controller = True, 
                                            kind = '', 
                                            name = '', 
                                            uid = '', )
                                        ], 
                                    resource_version = '', 
                                    self_link = '', 
                                    uid = '', ), 
                                spec = jobset.models.io/k8s/api/batch/v1/job_spec.io.k8s.api.batch.v1.JobSpec(
                                    active_deadline_seconds = 56, 
                                    backoff_limit = 56, 
                                    backoff_limit_per_index = 56, 
                                    completion_mode = '', 
                                    completions = 56, 
                                    managed_by = '', 
                                    manual_selector = True, 
                                    max_failed_indexes = 56, 
                                    parallelism = 56, 
                                    pod_failure_policy = jobset.models.io/k8s/api/batch/v1/pod_failure_policy.io.k8s.api.batch.v1.PodFailurePolicy(
                                        rules = [
                                            jobset.models.io/k8s/api/batch/v1/pod_failure_policy_rule.io.k8s.api.batch.v1.PodFailurePolicyRule(
                                                action = '', 
                                                on_exit_codes = jobset.models.io/k8s/api/batch/v1/pod_failure_policy_on_exit_codes_requirement.io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement(
                                                    container_name = '', 
                                                    operator = '', 
                                                    values = [
                                                        56
                                                        ], ), 
                                                on_pod_conditions = [
                                                    jobset.models.io/k8s/api/batch/v1/pod_failure_policy_on_pod_conditions_pattern.io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern(
                                                        status = '', 
                                                        type = '', )
                                                    ], )
                                            ], ), 
                                    pod_replacement_policy = '', 
                                    selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                        match_expressions = [
                                            jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                                key = '', 
                                                operator = '', )
                                            ], 
                                        match_labels = {
                                            'key' : ''
                                            }, ), 
                                    success_policy = jobset.models.io/k8s/api/batch/v1/success_policy.io.k8s.api.batch.v1.SuccessPolicy(
                                        rules = [
                                            jobset.models.io/k8s/api/batch/v1/success_policy_rule.io.k8s.api.batch.v1.SuccessPolicyRule(
                                                succeeded_count = 56, 
                                                succeeded_indexes = '', )
                                            ], ), 
                                    suspend = True, 
                                    template = jobset.models.io/k8s/api/core/v1/pod_template_spec.io.k8s.api.core.v1.PodTemplateSpec(), 
                                    ttl_seconds_after_finished = 56, ), ), )
                        ], 
                    startup_policy = jobset.models.jobset_v1alpha2_startup_policy.JobsetV1alpha2StartupPolicy(
                        startup_policy_order = '', ), 
                    success_policy = jobset.models.jobset_v1alpha2_success_policy.JobsetV1alpha2SuccessPolicy(
                        operator = '', ), 
                    suspend = True, 
                    ttl_seconds_after_finished = 56, ),
                status = jobset.models.jobset_v1alpha2_job_set_status.JobsetV1alpha2JobSetStatus(
                    conditions = [
                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/condition.io.k8s.apimachinery.pkg.apis.meta.v1.Condition(
                            last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '', 
                            observed_generation = 56, 
                            reason = '', 
                            status = '', 
                            type = '', )
                        ], 
                    replicated_jobs_status = [
                        jobset.models.jobset_v1alpha2_replicated_job_status.JobsetV1alpha2ReplicatedJobStatus(
                            active = 56, 
                            failed = 56, 
                            name = '', 
                            ready = 56, 
                            succeeded = 56, 
                            suspended = 56, )
                        ], 
                    restarts = 56, 
                    restarts_count_towards_max = 56, 
                    terminal_state = '', )
            )
        else:
            return JobsetV1alpha2JobSet(
        )
        """

    def testJobsetV1alpha2JobSet(self):
        """Test JobsetV1alpha2JobSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
