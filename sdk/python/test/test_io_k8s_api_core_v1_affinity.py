# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API

    The version of the OpenAPI document: v0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jobset.models.io_k8s_api_core_v1_affinity import IoK8sApiCoreV1Affinity

class TestIoK8sApiCoreV1Affinity(unittest.TestCase):
    """IoK8sApiCoreV1Affinity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1Affinity:
        """Test IoK8sApiCoreV1Affinity
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1Affinity`
        """
        model = IoK8sApiCoreV1Affinity()
        if include_optional:
            return IoK8sApiCoreV1Affinity(
                node_affinity = jobset.models.io/k8s/api/core/v1/node_affinity.io.k8s.api.core.v1.NodeAffinity(
                    preferred_during_scheduling_ignored_during_execution = [
                        jobset.models.io/k8s/api/core/v1/preferred_scheduling_term.io.k8s.api.core.v1.PreferredSchedulingTerm(
                            preference = jobset.models.io/k8s/api/core/v1/node_selector_term.io.k8s.api.core.v1.NodeSelectorTerm(
                                match_expressions = [
                                    jobset.models.io/k8s/api/core/v1/node_selector_requirement.io.k8s.api.core.v1.NodeSelectorRequirement(
                                        key = '', 
                                        operator = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                match_fields = [
                                    jobset.models.io/k8s/api/core/v1/node_selector_requirement.io.k8s.api.core.v1.NodeSelectorRequirement(
                                        key = '', 
                                        operator = '', )
                                    ], ), 
                            weight = 56, )
                        ], 
                    required_during_scheduling_ignored_during_execution = jobset.models.io/k8s/api/core/v1/node_selector.io.k8s.api.core.v1.NodeSelector(
                        node_selector_terms = [
                            jobset.models.io/k8s/api/core/v1/node_selector_term.io.k8s.api.core.v1.NodeSelectorTerm()
                            ], ), ),
                pod_affinity = jobset.models.io/k8s/api/core/v1/pod_affinity.io.k8s.api.core.v1.PodAffinity(
                    preferred_during_scheduling_ignored_during_execution = [
                        jobset.models.io/k8s/api/core/v1/weighted_pod_affinity_term.io.k8s.api.core.v1.WeightedPodAffinityTerm(
                            pod_affinity_term = jobset.models.io/k8s/api/core/v1/pod_affinity_term.io.k8s.api.core.v1.PodAffinityTerm(
                                label_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                    match_expressions = [
                                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                            key = '', 
                                            operator = '', 
                                            values = [
                                                ''
                                                ], )
                                        ], 
                                    match_labels = {
                                        'key' : ''
                                        }, ), 
                                match_label_keys = [
                                    ''
                                    ], 
                                mismatch_label_keys = [
                                    ''
                                    ], 
                                namespace_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(), 
                                namespaces = [
                                    ''
                                    ], 
                                topology_key = '', ), 
                            weight = 56, )
                        ], 
                    required_during_scheduling_ignored_during_execution = [
                        jobset.models.io/k8s/api/core/v1/pod_affinity_term.io.k8s.api.core.v1.PodAffinityTerm(
                            topology_key = '', )
                        ], ),
                pod_anti_affinity = jobset.models.io/k8s/api/core/v1/pod_anti_affinity.io.k8s.api.core.v1.PodAntiAffinity(
                    preferred_during_scheduling_ignored_during_execution = [
                        jobset.models.io/k8s/api/core/v1/weighted_pod_affinity_term.io.k8s.api.core.v1.WeightedPodAffinityTerm(
                            pod_affinity_term = jobset.models.io/k8s/api/core/v1/pod_affinity_term.io.k8s.api.core.v1.PodAffinityTerm(
                                label_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                    match_expressions = [
                                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                            key = '', 
                                            operator = '', 
                                            values = [
                                                ''
                                                ], )
                                        ], 
                                    match_labels = {
                                        'key' : ''
                                        }, ), 
                                match_label_keys = [
                                    ''
                                    ], 
                                mismatch_label_keys = [
                                    ''
                                    ], 
                                namespace_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(), 
                                namespaces = [
                                    ''
                                    ], 
                                topology_key = '', ), 
                            weight = 56, )
                        ], 
                    required_during_scheduling_ignored_during_execution = [
                        jobset.models.io/k8s/api/core/v1/pod_affinity_term.io.k8s.api.core.v1.PodAffinityTerm(
                            topology_key = '', )
                        ], )
            )
        else:
            return IoK8sApiCoreV1Affinity(
        )
        """

    def testIoK8sApiCoreV1Affinity(self):
        """Test IoK8sApiCoreV1Affinity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
