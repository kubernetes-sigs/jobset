# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API

    The version of the OpenAPI document: v0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jobset.models.io_k8s_api_core_v1_volume import IoK8sApiCoreV1Volume

class TestIoK8sApiCoreV1Volume(unittest.TestCase):
    """IoK8sApiCoreV1Volume unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1Volume:
        """Test IoK8sApiCoreV1Volume
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1Volume`
        """
        model = IoK8sApiCoreV1Volume()
        if include_optional:
            return IoK8sApiCoreV1Volume(
                aws_elastic_block_store = jobset.models.io/k8s/api/core/v1/aws_elastic_block_store_volume_source.io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource(
                    fs_type = '', 
                    partition = 56, 
                    read_only = True, 
                    volume_id = '', ),
                azure_disk = jobset.models.io/k8s/api/core/v1/azure_disk_volume_source.io.k8s.api.core.v1.AzureDiskVolumeSource(
                    caching_mode = '', 
                    disk_name = '', 
                    disk_uri = '', 
                    fs_type = '', 
                    kind = '', 
                    read_only = True, ),
                azure_file = jobset.models.io/k8s/api/core/v1/azure_file_volume_source.io.k8s.api.core.v1.AzureFileVolumeSource(
                    read_only = True, 
                    secret_name = '', 
                    share_name = '', ),
                cephfs = jobset.models.io/k8s/api/core/v1/ceph_fs_volume_source.io.k8s.api.core.v1.CephFSVolumeSource(
                    monitors = [
                        ''
                        ], 
                    path = '', 
                    read_only = True, 
                    secret_file = '', 
                    secret_ref = jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                        name = '', ), 
                    user = '', ),
                cinder = jobset.models.io/k8s/api/core/v1/cinder_volume_source.io.k8s.api.core.v1.CinderVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    secret_ref = jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                        name = '', ), 
                    volume_id = '', ),
                config_map = jobset.models.io/k8s/api/core/v1/config_map_volume_source.io.k8s.api.core.v1.ConfigMapVolumeSource(
                    default_mode = 56, 
                    items = [
                        jobset.models.io/k8s/api/core/v1/key_to_path.io.k8s.api.core.v1.KeyToPath(
                            key = '', 
                            mode = 56, 
                            path = '', )
                        ], 
                    name = '', 
                    optional = True, ),
                csi = jobset.models.io/k8s/api/core/v1/csi_volume_source.io.k8s.api.core.v1.CSIVolumeSource(
                    driver = '', 
                    fs_type = '', 
                    node_publish_secret_ref = jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                        name = '', ), 
                    read_only = True, 
                    volume_attributes = {
                        'key' : ''
                        }, ),
                downward_api = jobset.models.io/k8s/api/core/v1/downward_api_volume_source.io.k8s.api.core.v1.DownwardAPIVolumeSource(
                    default_mode = 56, 
                    items = [
                        jobset.models.io/k8s/api/core/v1/downward_api_volume_file.io.k8s.api.core.v1.DownwardAPIVolumeFile(
                            field_ref = jobset.models.io/k8s/api/core/v1/object_field_selector.io.k8s.api.core.v1.ObjectFieldSelector(
                                api_version = '', 
                                field_path = '', ), 
                            mode = 56, 
                            path = '', 
                            resource_field_ref = jobset.models.io/k8s/api/core/v1/resource_field_selector.io.k8s.api.core.v1.ResourceFieldSelector(
                                container_name = '', 
                                divisor = '', 
                                resource = '', ), )
                        ], ),
                empty_dir = jobset.models.io/k8s/api/core/v1/empty_dir_volume_source.io.k8s.api.core.v1.EmptyDirVolumeSource(
                    medium = '', 
                    size_limit = '', ),
                ephemeral = jobset.models.io/k8s/api/core/v1/ephemeral_volume_source.io.k8s.api.core.v1.EphemeralVolumeSource(
                    volume_claim_template = jobset.models.io/k8s/api/core/v1/persistent_volume_claim_template.io.k8s.api.core.v1.PersistentVolumeClaimTemplate(
                        metadata = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    subresource = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = jobset.models.io/k8s/api/core/v1/persistent_volume_claim_spec.io.k8s.api.core.v1.PersistentVolumeClaimSpec(
                            access_modes = [
                                ''
                                ], 
                            data_source = jobset.models.io/k8s/api/core/v1/typed_local_object_reference.io.k8s.api.core.v1.TypedLocalObjectReference(
                                api_group = '', 
                                kind = '', 
                                name = '', ), 
                            data_source_ref = jobset.models.io/k8s/api/core/v1/typed_object_reference.io.k8s.api.core.v1.TypedObjectReference(
                                api_group = '', 
                                kind = '', 
                                name = '', 
                                namespace = '', ), 
                            resources = jobset.models.io/k8s/api/core/v1/volume_resource_requirements.io.k8s.api.core.v1.VolumeResourceRequirements(
                                limits = {
                                    'key' : ''
                                    }, 
                                requests = {
                                    'key' : ''
                                    }, ), 
                            selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                match_expressions = [
                                    jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                        key = '', 
                                        operator = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                match_labels = {
                                    'key' : ''
                                    }, ), 
                            storage_class_name = '', 
                            volume_attributes_class_name = '', 
                            volume_mode = '', 
                            volume_name = '', ), ), ),
                fc = jobset.models.io/k8s/api/core/v1/fc_volume_source.io.k8s.api.core.v1.FCVolumeSource(
                    fs_type = '', 
                    lun = 56, 
                    read_only = True, 
                    target_wwns = [
                        ''
                        ], 
                    wwids = [
                        ''
                        ], ),
                flex_volume = jobset.models.io/k8s/api/core/v1/flex_volume_source.io.k8s.api.core.v1.FlexVolumeSource(
                    driver = '', 
                    fs_type = '', 
                    options = {
                        'key' : ''
                        }, 
                    read_only = True, 
                    secret_ref = jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                        name = '', ), ),
                flocker = jobset.models.io/k8s/api/core/v1/flocker_volume_source.io.k8s.api.core.v1.FlockerVolumeSource(
                    dataset_name = '', 
                    dataset_uuid = '', ),
                gce_persistent_disk = jobset.models.io/k8s/api/core/v1/gce_persistent_disk_volume_source.io.k8s.api.core.v1.GCEPersistentDiskVolumeSource(
                    fs_type = '', 
                    partition = 56, 
                    pd_name = '', 
                    read_only = True, ),
                git_repo = jobset.models.io/k8s/api/core/v1/git_repo_volume_source.io.k8s.api.core.v1.GitRepoVolumeSource(
                    directory = '', 
                    repository = '', 
                    revision = '', ),
                glusterfs = jobset.models.io/k8s/api/core/v1/glusterfs_volume_source.io.k8s.api.core.v1.GlusterfsVolumeSource(
                    endpoints = '', 
                    path = '', 
                    read_only = True, ),
                host_path = jobset.models.io/k8s/api/core/v1/host_path_volume_source.io.k8s.api.core.v1.HostPathVolumeSource(
                    path = '', 
                    type = '', ),
                image = jobset.models.io/k8s/api/core/v1/image_volume_source.io.k8s.api.core.v1.ImageVolumeSource(
                    pull_policy = '', 
                    reference = '', ),
                iscsi = jobset.models.io/k8s/api/core/v1/iscsi_volume_source.io.k8s.api.core.v1.ISCSIVolumeSource(
                    chap_auth_discovery = True, 
                    chap_auth_session = True, 
                    fs_type = '', 
                    initiator_name = '', 
                    iqn = '', 
                    iscsi_interface = '', 
                    lun = 56, 
                    portals = [
                        ''
                        ], 
                    read_only = True, 
                    secret_ref = jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                        name = '', ), 
                    target_portal = '', ),
                name = '',
                nfs = jobset.models.io/k8s/api/core/v1/nfs_volume_source.io.k8s.api.core.v1.NFSVolumeSource(
                    path = '', 
                    read_only = True, 
                    server = '', ),
                persistent_volume_claim = jobset.models.io/k8s/api/core/v1/persistent_volume_claim_volume_source.io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource(
                    claim_name = '', 
                    read_only = True, ),
                photon_persistent_disk = jobset.models.io/k8s/api/core/v1/photon_persistent_disk_volume_source.io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource(
                    fs_type = '', 
                    pd_id = '', ),
                portworx_volume = jobset.models.io/k8s/api/core/v1/portworx_volume_source.io.k8s.api.core.v1.PortworxVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    volume_id = '', ),
                projected = jobset.models.io/k8s/api/core/v1/projected_volume_source.io.k8s.api.core.v1.ProjectedVolumeSource(
                    default_mode = 56, 
                    sources = [
                        jobset.models.io/k8s/api/core/v1/volume_projection.io.k8s.api.core.v1.VolumeProjection(
                            cluster_trust_bundle = jobset.models.io/k8s/api/core/v1/cluster_trust_bundle_projection.io.k8s.api.core.v1.ClusterTrustBundleProjection(
                                label_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                    match_expressions = [
                                        jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                            key = '', 
                                            operator = '', 
                                            values = [
                                                ''
                                                ], )
                                        ], 
                                    match_labels = {
                                        'key' : ''
                                        }, ), 
                                name = '', 
                                optional = True, 
                                path = '', 
                                signer_name = '', ), 
                            config_map = jobset.models.io/k8s/api/core/v1/config_map_projection.io.k8s.api.core.v1.ConfigMapProjection(
                                items = [
                                    jobset.models.io/k8s/api/core/v1/key_to_path.io.k8s.api.core.v1.KeyToPath(
                                        key = '', 
                                        mode = 56, 
                                        path = '', )
                                    ], 
                                name = '', 
                                optional = True, ), 
                            downward_api = jobset.models.io/k8s/api/core/v1/downward_api_projection.io.k8s.api.core.v1.DownwardAPIProjection(), 
                            secret = jobset.models.io/k8s/api/core/v1/secret_projection.io.k8s.api.core.v1.SecretProjection(
                                name = '', 
                                optional = True, ), 
                            service_account_token = jobset.models.io/k8s/api/core/v1/service_account_token_projection.io.k8s.api.core.v1.ServiceAccountTokenProjection(
                                audience = '', 
                                expiration_seconds = 56, 
                                path = '', ), )
                        ], ),
                quobyte = jobset.models.io/k8s/api/core/v1/quobyte_volume_source.io.k8s.api.core.v1.QuobyteVolumeSource(
                    group = '', 
                    read_only = True, 
                    registry = '', 
                    tenant = '', 
                    user = '', 
                    volume = '', ),
                rbd = jobset.models.io/k8s/api/core/v1/rbd_volume_source.io.k8s.api.core.v1.RBDVolumeSource(
                    fs_type = '', 
                    image = '', 
                    keyring = '', 
                    monitors = [
                        ''
                        ], 
                    pool = '', 
                    read_only = True, 
                    secret_ref = jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                        name = '', ), 
                    user = '', ),
                scale_io = jobset.models.io/k8s/api/core/v1/scale_io_volume_source.io.k8s.api.core.v1.ScaleIOVolumeSource(
                    fs_type = '', 
                    gateway = '', 
                    protection_domain = '', 
                    read_only = True, 
                    secret_ref = jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                        name = '', ), 
                    ssl_enabled = True, 
                    storage_mode = '', 
                    storage_pool = '', 
                    system = '', 
                    volume_name = '', ),
                secret = jobset.models.io/k8s/api/core/v1/secret_volume_source.io.k8s.api.core.v1.SecretVolumeSource(
                    default_mode = 56, 
                    items = [
                        jobset.models.io/k8s/api/core/v1/key_to_path.io.k8s.api.core.v1.KeyToPath(
                            key = '', 
                            mode = 56, 
                            path = '', )
                        ], 
                    optional = True, 
                    secret_name = '', ),
                storageos = jobset.models.io/k8s/api/core/v1/storage_os_volume_source.io.k8s.api.core.v1.StorageOSVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    secret_ref = jobset.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                        name = '', ), 
                    volume_name = '', 
                    volume_namespace = '', ),
                vsphere_volume = jobset.models.io/k8s/api/core/v1/vsphere_virtual_disk_volume_source.io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource(
                    fs_type = '', 
                    storage_policy_id = '', 
                    storage_policy_name = '', 
                    volume_path = '', )
            )
        else:
            return IoK8sApiCoreV1Volume(
                name = '',
        )
        """

    def testIoK8sApiCoreV1Volume(self):
        """Test IoK8sApiCoreV1Volume"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
