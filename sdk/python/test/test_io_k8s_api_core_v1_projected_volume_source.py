# coding: utf-8

"""
    JobSet SDK

    Python SDK for the JobSet API

    The version of the OpenAPI document: v0.1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jobset.models.io_k8s_api_core_v1_projected_volume_source import IoK8sApiCoreV1ProjectedVolumeSource

class TestIoK8sApiCoreV1ProjectedVolumeSource(unittest.TestCase):
    """IoK8sApiCoreV1ProjectedVolumeSource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1ProjectedVolumeSource:
        """Test IoK8sApiCoreV1ProjectedVolumeSource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1ProjectedVolumeSource`
        """
        model = IoK8sApiCoreV1ProjectedVolumeSource()
        if include_optional:
            return IoK8sApiCoreV1ProjectedVolumeSource(
                default_mode = 56,
                sources = [
                    jobset.models.io/k8s/api/core/v1/volume_projection.io.k8s.api.core.v1.VolumeProjection(
                        cluster_trust_bundle = jobset.models.io/k8s/api/core/v1/cluster_trust_bundle_projection.io.k8s.api.core.v1.ClusterTrustBundleProjection(
                            label_selector = jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                match_expressions = [
                                    jobset.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                        key = '', 
                                        operator = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                match_labels = {
                                    'key' : ''
                                    }, ), 
                            name = '', 
                            optional = True, 
                            path = '', 
                            signer_name = '', ), 
                        config_map = jobset.models.io/k8s/api/core/v1/config_map_projection.io.k8s.api.core.v1.ConfigMapProjection(
                            items = [
                                jobset.models.io/k8s/api/core/v1/key_to_path.io.k8s.api.core.v1.KeyToPath(
                                    key = '', 
                                    mode = 56, 
                                    path = '', )
                                ], 
                            name = '', 
                            optional = True, ), 
                        downward_api = jobset.models.io/k8s/api/core/v1/downward_api_projection.io.k8s.api.core.v1.DownwardAPIProjection(), 
                        secret = jobset.models.io/k8s/api/core/v1/secret_projection.io.k8s.api.core.v1.SecretProjection(
                            name = '', 
                            optional = True, ), 
                        service_account_token = jobset.models.io/k8s/api/core/v1/service_account_token_projection.io.k8s.api.core.v1.ServiceAccountTokenProjection(
                            audience = '', 
                            expiration_seconds = 56, 
                            path = '', ), )
                    ]
            )
        else:
            return IoK8sApiCoreV1ProjectedVolumeSource(
        )
        """

    def testIoK8sApiCoreV1ProjectedVolumeSource(self):
        """Test IoK8sApiCoreV1ProjectedVolumeSource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
